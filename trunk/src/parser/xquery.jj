/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. xquery.jj */
/*@egen*/options {
               
  KEEP_LINE_COLUMN = false;
                 
}

PARSER_BEGIN(XQueryParser)

package parser;

/** An XQuery Grammar. */
public class XQueryParser/*@bgen(jjtree)*/implements XQueryParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTXQueryParserState jjtree = new JJTXQueryParserState();

/*@egen*/

  /** Main entry point. */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    XQueryParser t = new XQueryParser(System.in);
    try {
      ASTStart n = t.Start();
      n.dump(">");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(XQueryParser)


SKIP :
{
  " "
| 
  "\t"
| 
  "\n"
| 
  "\r"
}

TOKEN [IGNORE_CASE]:
{
  < DOC  : "doc" >
| 
  < TEXT : "text()" >
| 
  < EQ   : "=" | "eq" >
| 
  < IS   : "==" | "is" >
| 
  < AND  : "and" >
|   
  < OR   : "or" >
| 
  < NOT  : "not" >
|
  < FOR  : "for" >
|
  < IN   : "in" >
|
  < LET  : "let" >
|
  < WHERE : "where" >
|
  < SOME   : "some" >
|
  < EMPTY : "empty" >
|
  < SATISFIES : "satisfies" >
|
  < RETURN    : "return" >
|
  < COMMA     : "," >
|
  < ASSIGN    : ":=" >
}

TOKEN :
{
  < STRING  : "\"" (~["\""] | "\\\"")*  "\"" >
| 
  < TAGNAME : ( ["a"-"z","A"-"Z","_","-","0"-"9"] )+ >
| 
  < VAR     : "$"< TAGNAME > >
}

/** Main production. */
ASTStart Start() : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  //XPath()
  XQuery()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/** An Xpath. */
void XPath()       : {}
{
  AbsPath()
  //Filter()
}

/** An Absolute Path. */
void DocPath()      : {/*@bgen(jjtree) Doc */
                        ASTDoc jjtn000 = new ASTDoc(JJTDOC);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) Doc */
  try {
/*@egen*/
  <DOC> "(" t = <STRING> { jjtn000.fileName = t.image; } ")"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AbsPath()       : {}
{
  LOOKAHEAD(5)/*@bgen(jjtree) AbsSlash */
  {
    ASTAbsSlash jjtn001 = new ASTAbsSlash(JJTABSSLASH);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (DocPath() "/" RelPath())/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/           
| 
  LOOKAHEAD(5)/*@bgen(jjtree) AbsDSlash */
  {
    ASTAbsDSlash jjtn002 = new ASTAbsDSlash(JJTABSDSLASH);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/
  (DocPath() "//" RelPath())/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/           
}

/** A Relative Path. */
void RelPath()       : {}
{
  LOOKAHEAD(RelPathPrime() ("/" RelPath())+)/*@bgen(jjtree) RelSlash */
  {
    ASTRelSlash jjtn001 = new ASTRelSlash(JJTRELSLASH);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (RelPathPrime() (LOOKAHEAD("/" RelPath())"/" RelPath())+)/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/               
| 
  LOOKAHEAD(RelPathPrime() ("//" RelPath())+)/*@bgen(jjtree) RelDSlash */
  {
    ASTRelDSlash jjtn002 = new ASTRelDSlash(JJTRELDSLASH);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/
  (RelPathPrime() (LOOKAHEAD("//" RelPath())"//" RelPath())+)/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/                
| 
  LOOKAHEAD(RelPathPrime() ("[" Filter() "]")+ RelSlash())/*@bgen(jjtree) RelFilter */
  {
    ASTRelFilter jjtn003 = new ASTRelFilter(JJTRELFILTER);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/
  (RelPathPrime() ("[" Filter() "]")+  RelSlash())/*@bgen(jjtree)*/
  } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      throw (RuntimeException)jjte003;
    }
    if (jjte003 instanceof ParseException) {
      throw (ParseException)jjte003;
    }
    throw (Error)jjte003;
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/                       
| 
  LOOKAHEAD(RelPathPrime() ("[" Filter() "]")+  RelDSlash())/*@bgen(jjtree) RelFilter */
  {
    ASTRelFilter jjtn004 = new ASTRelFilter(JJTRELFILTER);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
  }
  try {
/*@egen*/
  (RelPathPrime() ("[" Filter() "]")+ RelDSlash())/*@bgen(jjtree)*/
  } catch (Throwable jjte004) {
    if (jjtc004) {
      jjtree.clearNodeScope(jjtn004);
      jjtc004 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte004 instanceof RuntimeException) {
      throw (RuntimeException)jjte004;
    }
    if (jjte004 instanceof ParseException) {
      throw (ParseException)jjte004;
    }
    throw (Error)jjte004;
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
  }
/*@egen*/                      
| 
  LOOKAHEAD(RelPathPrime() ("[" Filter() "]")+ RelComma())/*@bgen(jjtree) RelFilter */
  {
    ASTRelFilter jjtn005 = new ASTRelFilter(JJTRELFILTER);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
  }
  try {
/*@egen*/
  (RelPathPrime() ("[" Filter() "]")+ RelComma())/*@bgen(jjtree)*/
  } catch (Throwable jjte005) {
    if (jjtc005) {
      jjtree.clearNodeScope(jjtn005);
      jjtc005 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte005 instanceof RuntimeException) {
      throw (RuntimeException)jjte005;
    }
    if (jjte005 instanceof ParseException) {
      throw (ParseException)jjte005;
    }
    throw (Error)jjte005;
  } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
    }
  }
/*@egen*/                       
| 
  LOOKAHEAD(RelPathPrime() ("[" Filter() "]")+)/*@bgen(jjtree) RelFilter */
  {
    ASTRelFilter jjtn006 = new ASTRelFilter(JJTRELFILTER);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
  }
  try {
/*@egen*/
  (RelPathPrime() ("[" Filter() "]")+)/*@bgen(jjtree)*/
  } catch (Throwable jjte006) {
    if (jjtc006) {
      jjtree.clearNodeScope(jjtn006);
      jjtc006 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte006 instanceof RuntimeException) {
      throw (RuntimeException)jjte006;
    }
    if (jjte006 instanceof ParseException) {
      throw (ParseException)jjte006;
    }
    throw (Error)jjte006;
  } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
    }
  }
/*@egen*/                                  
|  
  LOOKAHEAD(RelPathPrime() (<COMMA> RelPath())+)/*@bgen(jjtree) RelComma */
  {
    ASTRelComma jjtn007 = new ASTRelComma(JJTRELCOMMA);
    boolean jjtc007 = true;
    jjtree.openNodeScope(jjtn007);
  }
  try {
/*@egen*/
  (RelPathPrime() (LOOKAHEAD(<COMMA> RelPath()) <COMMA> RelPath())+)/*@bgen(jjtree)*/
  } catch (Throwable jjte007) {
    if (jjtc007) {
      jjtree.clearNodeScope(jjtn007);
      jjtc007 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte007 instanceof RuntimeException) {
      throw (RuntimeException)jjte007;
    }
    if (jjte007 instanceof ParseException) {
      throw (ParseException)jjte007;
    }
    throw (Error)jjte007;
  } finally {
    if (jjtc007) {
      jjtree.closeNodeScope(jjtn007, true);
    }
  }
/*@egen*/                
| 
  LOOKAHEAD(RelPathPrime())
  RelPathPrime()                                           //#Epsilon
}

void RelSlash()           : {/*@bgen(jjtree) RelSlash */
  ASTRelSlash jjtn000 = new ASTRelSlash(JJTRELSLASH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RelSlash */
  try {
/*@egen*/
  "/" RelPath()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
} 

void RelDSlash()            : {/*@bgen(jjtree) RelDSlash */
  ASTRelDSlash jjtn000 = new ASTRelDSlash(JJTRELDSLASH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RelDSlash */
  try {
/*@egen*/
  "//" RelPath()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
} 

void RelComma()           : {/*@bgen(jjtree) RelComma */
  ASTRelComma jjtn000 = new ASTRelComma(JJTRELCOMMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RelComma */
  try {
/*@egen*/
  <COMMA> RelPath()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
} 

void RelFilter()            : {/*@bgen(jjtree) RelFilter */
  ASTRelFilter jjtn000 = new ASTRelFilter(JJTRELFILTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RelFilter */
  try {
/*@egen*/
  "[" Filter() "]"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void RelPathPrime()       : { Token t; }
{/*@bgen(jjtree) Star */
  {
    ASTStar jjtn001 = new ASTStar(JJTSTAR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  "*"/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/                                               
|/*@bgen(jjtree) Dot */
  {
    ASTDot jjtn002 = new ASTDot(JJTDOT);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/ 
  "."/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/                                              
|/*@bgen(jjtree) Ddot */
  {
    ASTDdot jjtn003 = new ASTDdot(JJTDDOT);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/ 
  ".."/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/                                              
|/*@bgen(jjtree) Text */
  {
    ASTText jjtn004 = new ASTText(JJTTEXT);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
  }
  try {
/*@egen*/ 
  <TEXT>/*@bgen(jjtree)*/
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
  }
/*@egen*/                                            
|/*@bgen(jjtree) Paren */
  {
    ASTParen jjtn005 = new ASTParen(JJTPAREN);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
  }
  try {
/*@egen*/ 
  ("(" RelPath() ")")/*@bgen(jjtree)*/
  } catch (Throwable jjte005) {
    if (jjtc005) {
      jjtree.clearNodeScope(jjtn005);
      jjtc005 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte005 instanceof RuntimeException) {
      throw (RuntimeException)jjte005;
    }
    if (jjte005 instanceof ParseException) {
      throw (ParseException)jjte005;
    }
    throw (Error)jjte005;
  } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
    }
  }
/*@egen*/                                
| 
  t = <TAGNAME>/*@bgen(jjtree) TagName */
                {
                  ASTTagName jjtn006 = new ASTTagName(JJTTAGNAME);
                  boolean jjtc006 = true;
                  jjtree.openNodeScope(jjtn006);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn006, true);
                  jjtc006 = false;
                }
/*@egen*/ { jjtn006.tagName = t.image; }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc006) {
                    jjtree.closeNodeScope(jjtn006, true);
                  }
                }
/*@egen*/         
}

/** A Filter Path. */
void Filter()       : {}
{
  LOOKAHEAD(FilterPrime() (<AND> Filter())+)/*@bgen(jjtree) FilterAnd */
  {
    ASTFilterAnd jjtn001 = new ASTFilterAnd(JJTFILTERAND);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (FilterPrime() (LOOKAHEAD(<AND> Filter()) <AND> Filter())+)/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/           
| 
  LOOKAHEAD(FilterPrime() (<OR>  Filter())+)/*@bgen(jjtree) FilterOr */
  {
    ASTFilterOr jjtn002 = new ASTFilterOr(JJTFILTEROR);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/
  (FilterPrime() (LOOKAHEAD(<AND> Filter()) <OR>  Filter())+)/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/           
| 
  LOOKAHEAD(FilterPrime())
  FilterPrime()                                             //#Epsilon
}

void FilterPrime()       : {}
{
  LOOKAHEAD(RelPath() <EQ>)/*@bgen(jjtree) FilterEq */
  {
    ASTFilterEq jjtn001 = new ASTFilterEq(JJTFILTEREQ);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (RelPath() <EQ> RelPath())/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/          
| 
  LOOKAHEAD(RelPath() <IS>)/*@bgen(jjtree) FilterIs */
  {
    ASTFilterIs jjtn002 = new ASTFilterIs(JJTFILTERIS);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/
  (RelPath() <IS> RelPath())/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/          
| 
  LOOKAHEAD(RelPath())/*@bgen(jjtree) FilterRelPath */
  {
    ASTFilterRelPath jjtn003 = new ASTFilterRelPath(JJTFILTERRELPATH);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/
  RelPath()/*@bgen(jjtree)*/
  } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      throw (RuntimeException)jjte003;
    }
    if (jjte003 instanceof ParseException) {
      throw (ParseException)jjte003;
    }
    throw (Error)jjte003;
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/                                 
|/*@bgen(jjtree) FilterParen */
  {
    ASTFilterParen jjtn004 = new ASTFilterParen(JJTFILTERPAREN);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
  }
  try {
/*@egen*/ 
  ("(" Filter() ")")/*@bgen(jjtree)*/
  } catch (Throwable jjte004) {
    if (jjtc004) {
      jjtree.clearNodeScope(jjtn004);
      jjtc004 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte004 instanceof RuntimeException) {
      throw (RuntimeException)jjte004;
    }
    if (jjte004 instanceof ParseException) {
      throw (ParseException)jjte004;
    }
    throw (Error)jjte004;
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
  }
/*@egen*/                     
|/*@bgen(jjtree) FilterNot */
  {
    ASTFilterNot jjtn005 = new ASTFilterNot(JJTFILTERNOT);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
  }
  try {
/*@egen*/ 
  (<NOT> Filter())/*@bgen(jjtree)*/
  } catch (Throwable jjte005) {
    if (jjtc005) {
      jjtree.clearNodeScope(jjtn005);
      jjtc005 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte005 instanceof RuntimeException) {
      throw (RuntimeException)jjte005;
    }
    if (jjte005 instanceof ParseException) {
      throw (ParseException)jjte005;
    }
    throw (Error)jjte005;
  } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
    }
  }
/*@egen*/                     
}

void ForClause()            : {/*@bgen(jjtree) ForClause */
  ASTForClause jjtn000 = new ASTForClause(JJTFORCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForClause */
  try {
/*@egen*/
  <FOR> In() (<COMMA> In())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void In()     : {/*@bgen(jjtree) In */
  ASTIn jjtn000 = new ASTIn(JJTIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) In */
  try {
/*@egen*/
  Var() <IN> XQuery()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void LetClause()            : {/*@bgen(jjtree) LetClause */
  ASTLetClause jjtn000 = new ASTLetClause(JJTLETCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LetClause */
  try {
/*@egen*/
  <LET> Assign() (<COMMA> Assign())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Assign()         : {/*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assign */
  try {
/*@egen*/
  Var() <ASSIGN> XQuery()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void WhereClause()       : {}
{/*@bgen(jjtree) WhereClause */
  {
    ASTWhereClause jjtn001 = new ASTWhereClause(JJTWHERECLAUSE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (<WHERE> Cond())/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/             
|
  {}
}

void ReturnClause()       : {}
{/*@bgen(jjtree) ReturnClause */
  {
    ASTReturnClause jjtn001 = new ASTReturnClause(JJTRETURNCLAUSE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (<RETURN> XQuery())/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/              
}

void Cond()       : {}
{
  LOOKAHEAD(CondPrime() (<AND> Cond())+)/*@bgen(jjtree) CondAnd */
  {
    ASTCondAnd jjtn001 = new ASTCondAnd(JJTCONDAND);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (CondPrime() (LOOKAHEAD(<AND> Cond()) <AND> Cond())+)/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/         
| 
  LOOKAHEAD(CondPrime() (<OR>  Cond())+)/*@bgen(jjtree) CondOr */
  {
    ASTCondOr jjtn002 = new ASTCondOr(JJTCONDOR);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/
  (CondPrime() (LOOKAHEAD(<AND> Cond()) <OR>  Cond())+)/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/         
| 
  LOOKAHEAD(CondPrime())
  CondPrime()                                             //#Epsilon
}

void CondPrime()       : {}
{
  LOOKAHEAD(XQuery() <EQ>)/*@bgen(jjtree) CondEq */
  {
    ASTCondEq jjtn001 = new ASTCondEq(JJTCONDEQ);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (XQuery() <EQ> XQuery())/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/        
| 
  LOOKAHEAD(XQuery() <EQ>)/*@bgen(jjtree) CondIs */
  {
    ASTCondIs jjtn002 = new ASTCondIs(JJTCONDIS);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/
  (XQuery() <IS> XQuery())/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/        
|/*@bgen(jjtree) CondEmpty */
  {
    ASTCondEmpty jjtn003 = new ASTCondEmpty(JJTCONDEMPTY);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/ 
  (<EMPTY> "(" XQuery() ")")/*@bgen(jjtree)*/
  } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      throw (RuntimeException)jjte003;
    }
    if (jjte003 instanceof ParseException) {
      throw (ParseException)jjte003;
    }
    throw (Error)jjte003;
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/                     
|
  LOOKAHEAD(<SOME> In() (<COMMA> In())*)/*@bgen(jjtree) CondSome */
  {
    ASTCondSome jjtn004 = new ASTCondSome(JJTCONDSOME);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
  }
  try {
/*@egen*/
  (<SOME> In() (LOOKAHEAD(<COMMA> In()) <COMMA> In())* <SATISFIES> Cond())/*@bgen(jjtree)*/
  } catch (Throwable jjte004) {
    if (jjtc004) {
      jjtree.clearNodeScope(jjtn004);
      jjtc004 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte004 instanceof RuntimeException) {
      throw (RuntimeException)jjte004;
    }
    if (jjte004 instanceof ParseException) {
      throw (ParseException)jjte004;
    }
    throw (Error)jjte004;
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
  }
/*@egen*/          
|/*@bgen(jjtree) Paren */
  {
    ASTParen jjtn005 = new ASTParen(JJTPAREN);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
  }
  try {
/*@egen*/ 
  ("(" Cond() ")")/*@bgen(jjtree)*/
  } catch (Throwable jjte005) {
    if (jjtc005) {
      jjtree.clearNodeScope(jjtn005);
      jjtc005 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte005 instanceof RuntimeException) {
      throw (RuntimeException)jjte005;
    }
    if (jjte005 instanceof ParseException) {
      throw (ParseException)jjte005;
    }
    throw (Error)jjte005;
  } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
    }
  }
/*@egen*/               
}

void Var()      : {/*@bgen(jjtree) Var */
                    ASTVar jjtn000 = new ASTVar(JJTVAR);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) Var */
  try {
/*@egen*/
  t = <VAR>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ { jjtn000.varName = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void XQuery()       : {}
{
  LOOKAHEAD(XQueryPrime() "/" RelPath())/*@bgen(jjtree) XQuerySlash */
  {
    ASTXQuerySlash jjtn001 = new ASTXQuerySlash(JJTXQUERYSLASH);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (XQueryPrime() "/" RelPath())/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/                  
|
  LOOKAHEAD(XQueryPrime() Temp())/*@bgen(jjtree) XQueryComma */
  {
    ASTXQueryComma jjtn002 = new ASTXQueryComma(JJTXQUERYCOMMA);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/
  (XQueryPrime() (LOOKAHEAD(Temp()) Temp())+)/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/                   
| 
  LOOKAHEAD(XQueryPrime())
  XQueryPrime()                                           //#Epsilon
}

void Temp()       : {}
{
  LOOKAHEAD({ (getToken(1).kind == COMMA && getToken(3).kind != IN && getToken(3).kind != ASSIGN )})
  <COMMA> XQuery()
}

void XQueryPrime()       : { Token t; }
{
  Var()
| 
  t = <STRING>/*@bgen(jjtree) String */
               {
                 ASTString jjtn001 = new ASTString(JJTSTRING);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*//*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtc001 = false;
               }
/*@egen*/ { jjtn001.strName = t.image; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
               }
/*@egen*/                                              
| 
  AbsPath()                                     
|/*@bgen(jjtree) Paren */
  {
    ASTParen jjtn002 = new ASTParen(JJTPAREN);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/ 
  ("(" XQuery() ")")/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/                                
|/*@bgen(jjtree) Newtag */
  {
    ASTNewtag jjtn003 = new ASTNewtag(JJTNEWTAG);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/ 
  ("<" t = <TAGNAME> { jjtn003.tagName = t.image; } ">" "{" XQuery() "}" "<" "/" <TAGNAME> ">")/*@bgen(jjtree)*/
  } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      throw (RuntimeException)jjte003;
    }
    if (jjte003 instanceof ParseException) {
      throw (ParseException)jjte003;
    }
    throw (Error)jjte003;
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/        
|
  LOOKAHEAD(ForClause() LetClause())/*@bgen(jjtree) FLWR */
  {
    ASTFLWR jjtn004 = new ASTFLWR(JJTFLWR);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
  }
  try {
/*@egen*/
  (ForClause() LetClause() WhereClause() ReturnClause())/*@bgen(jjtree)*/
  } catch (Throwable jjte004) {
    if (jjtc004) {
      jjtree.clearNodeScope(jjtn004);
      jjtc004 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte004 instanceof RuntimeException) {
      throw (RuntimeException)jjte004;
    }
    if (jjte004 instanceof ParseException) {
      throw (ParseException)jjte004;
    }
    throw (Error)jjte004;
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
  }
/*@egen*/      
|
  LOOKAHEAD(ForClause())/*@bgen(jjtree) FLWR */
  {
    ASTFLWR jjtn005 = new ASTFLWR(JJTFLWR);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
  }
  try {
/*@egen*/
  (ForClause() WhereClause() ReturnClause())/*@bgen(jjtree)*/
  } catch (Throwable jjte005) {
    if (jjtc005) {
      jjtree.clearNodeScope(jjtn005);
      jjtc005 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte005 instanceof RuntimeException) {
      throw (RuntimeException)jjte005;
    }
    if (jjte005 instanceof ParseException) {
      throw (ParseException)jjte005;
    }
    throw (Error)jjte005;
  } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
    }
  }
/*@egen*/      
|/*@bgen(jjtree) LX */
  {
    ASTLX jjtn006 = new ASTLX(JJTLX);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
  }
  try {
/*@egen*/
  (LetClause() XQuery())/*@bgen(jjtree)*/
  } catch (Throwable jjte006) {
    if (jjtc006) {
      jjtree.clearNodeScope(jjtn006);
      jjtc006 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte006 instanceof RuntimeException) {
      throw (RuntimeException)jjte006;
    }
    if (jjte006 instanceof ParseException) {
      throw (ParseException)jjte006;
    }
    throw (Error)jjte006;
  } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
    }
  }
/*@egen*/        
}
