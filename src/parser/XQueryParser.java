/* Generated By:JJTree&JavaCC: Do not edit this line. XQueryParser.java */
package parser;

/** An XQuery Grammar. */
public class XQueryParser/*@bgen(jjtree)*/implements XQueryParserTreeConstants, XQueryParserConstants {/*@bgen(jjtree)*/
  protected static JJTXQueryParserState jjtree = new JJTXQueryParserState();
  /** Main entry point. */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    XQueryParser t = new XQueryParser(System.in);
    try {
      ASTStart n = t.Start();
      n.dump(">");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }

/** Main production. */
  static final public ASTStart Start() throws ParseException {
                    /*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      XQuery();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/** An Xpath. */
  static final public void XPath() throws ParseException {
    AbsPath();
  }

/** An Absolute Path. */
  static final public void DocPath() throws ParseException {
                       /*@bgen(jjtree) Doc */
                        ASTDoc jjtn000 = new ASTDoc(JJTDOC);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(DOC);
      jj_consume_token(25);
      t = jj_consume_token(STRING);
                           jjtn000.fileName = t.image;
      jj_consume_token(26);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void AbsPath() throws ParseException {
    if (jj_2_1(5)) {
    ASTAbsSlash jjtn001 = new ASTAbsSlash(JJTABSSLASH);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        DocPath();
        jj_consume_token(27);
        RelPath();
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } else if (jj_2_2(5)) {
    ASTAbsDSlash jjtn002 = new ASTAbsDSlash(JJTABSDSLASH);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        DocPath();
        jj_consume_token(28);
        RelPath();
      } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/** A Relative Path. */
  static final public void RelPath() throws ParseException {
    if (jj_2_6(2147483647)) {
    ASTRelSlash jjtn001 = new ASTRelSlash(JJTRELSLASH);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        RelPathPrime();
        label_1:
        while (true) {
          jj_consume_token(27);
          RelPath();
          if (jj_2_3(2147483647)) {
            ;
          } else {
            break label_1;
          }
        }
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } else if (jj_2_7(2147483647)) {
    ASTRelDSlash jjtn002 = new ASTRelDSlash(JJTRELDSLASH);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        RelPathPrime();
        label_2:
        while (true) {
          jj_consume_token(28);
          RelPath();
          if (jj_2_4(2147483647)) {
            ;
          } else {
            break label_2;
          }
        }
      } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
    } else if (jj_2_8(2147483647)) {
    ASTRelFilter jjtn003 = new ASTRelFilter(JJTRELFILTER);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
      try {
        RelPathPrime();
        label_3:
        while (true) {
          jj_consume_token(29);
          Filter();
          jj_consume_token(30);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 29:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_3;
          }
        }
        RelSlash();
      } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte003;}
    }
    if (jjte003 instanceof ParseException) {
      {if (true) throw (ParseException)jjte003;}
    }
    {if (true) throw (Error)jjte003;}
      } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
      }
    } else if (jj_2_9(2147483647)) {
    ASTRelFilter jjtn004 = new ASTRelFilter(JJTRELFILTER);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
      try {
        RelPathPrime();
        label_4:
        while (true) {
          jj_consume_token(29);
          Filter();
          jj_consume_token(30);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 29:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_4;
          }
        }
        RelDSlash();
      } catch (Throwable jjte004) {
    if (jjtc004) {
      jjtree.clearNodeScope(jjtn004);
      jjtc004 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte004 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte004;}
    }
    if (jjte004 instanceof ParseException) {
      {if (true) throw (ParseException)jjte004;}
    }
    {if (true) throw (Error)jjte004;}
      } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
      }
    } else if (jj_2_10(2147483647)) {
    ASTRelFilter jjtn005 = new ASTRelFilter(JJTRELFILTER);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
      try {
        RelPathPrime();
        label_5:
        while (true) {
          jj_consume_token(29);
          Filter();
          jj_consume_token(30);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 29:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_5;
          }
        }
        RelComma();
      } catch (Throwable jjte005) {
    if (jjtc005) {
      jjtree.clearNodeScope(jjtn005);
      jjtc005 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte005 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte005;}
    }
    if (jjte005 instanceof ParseException) {
      {if (true) throw (ParseException)jjte005;}
    }
    {if (true) throw (Error)jjte005;}
      } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
    }
      }
    } else if (jj_2_11(2147483647)) {
    ASTRelFilter jjtn006 = new ASTRelFilter(JJTRELFILTER);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
      try {
        RelPathPrime();
        label_6:
        while (true) {
          jj_consume_token(29);
          Filter();
          jj_consume_token(30);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 29:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_6;
          }
        }
      } catch (Throwable jjte006) {
    if (jjtc006) {
      jjtree.clearNodeScope(jjtn006);
      jjtc006 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte006 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte006;}
    }
    if (jjte006 instanceof ParseException) {
      {if (true) throw (ParseException)jjte006;}
    }
    {if (true) throw (Error)jjte006;}
      } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
    }
      }
    } else if (jj_2_12(2147483647)) {
    ASTRelComma jjtn007 = new ASTRelComma(JJTRELCOMMA);
    boolean jjtc007 = true;
    jjtree.openNodeScope(jjtn007);
      try {
        RelPathPrime();
        label_7:
        while (true) {
          jj_consume_token(COMMA);
          RelPath();
          if (jj_2_5(2147483647)) {
            ;
          } else {
            break label_7;
          }
        }
      } catch (Throwable jjte007) {
    if (jjtc007) {
      jjtree.clearNodeScope(jjtn007);
      jjtc007 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte007 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte007;}
    }
    if (jjte007 instanceof ParseException) {
      {if (true) throw (ParseException)jjte007;}
    }
    {if (true) throw (Error)jjte007;}
      } finally {
    if (jjtc007) {
      jjtree.closeNodeScope(jjtn007, true);
    }
      }
    } else if (jj_2_13(2147483647)) {
      RelPathPrime();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void RelSlash() throws ParseException {
                             /*@bgen(jjtree) RelSlash */
  ASTRelSlash jjtn000 = new ASTRelSlash(JJTRELSLASH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(27);
      RelPath();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void RelDSlash() throws ParseException {
                               /*@bgen(jjtree) RelDSlash */
  ASTRelDSlash jjtn000 = new ASTRelDSlash(JJTRELDSLASH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(28);
      RelPath();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void RelComma() throws ParseException {
                             /*@bgen(jjtree) RelComma */
  ASTRelComma jjtn000 = new ASTRelComma(JJTRELCOMMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(COMMA);
      RelPath();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void RelFilter() throws ParseException {
                               /*@bgen(jjtree) RelFilter */
  ASTRelFilter jjtn000 = new ASTRelFilter(JJTRELFILTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(29);
      Filter();
      jj_consume_token(30);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void RelPathPrime() throws ParseException {
                              Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
    ASTStar jjtn001 = new ASTStar(JJTSTAR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(31);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
    case 32:
    ASTDot jjtn002 = new ASTDot(JJTDOT);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(32);
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
      break;
    case 33:
    ASTDdot jjtn003 = new ASTDdot(JJTDDOT);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(33);
      } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
      }
      break;
    case TEXT:
    ASTText jjtn004 = new ASTText(JJTTEXT);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(TEXT);
      } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
      }
      break;
    case 25:
    ASTParen jjtn005 = new ASTParen(JJTPAREN);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(25);
        RelPath();
        jj_consume_token(26);
      } catch (Throwable jjte005) {
    if (jjtc005) {
      jjtree.clearNodeScope(jjtn005);
      jjtc005 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte005 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte005;}
    }
    if (jjte005 instanceof ParseException) {
      {if (true) throw (ParseException)jjte005;}
    }
    {if (true) throw (Error)jjte005;}
      } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
    }
      }
      break;
    case TAGNAME:
      t = jj_consume_token(TAGNAME);
                  ASTTagName jjtn006 = new ASTTagName(JJTTAGNAME);
                  boolean jjtc006 = true;
                  jjtree.openNodeScope(jjtn006);
      try {
                  jjtree.closeNodeScope(jjtn006, true);
                  jjtc006 = false;
                  jjtn006.tagName = t.image;
      } finally {
                  if (jjtc006) {
                    jjtree.closeNodeScope(jjtn006, true);
                  }
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/** A Filter Path. */
  static final public void Filter() throws ParseException {
    if (jj_2_16(2147483647)) {
    ASTFilterAnd jjtn001 = new ASTFilterAnd(JJTFILTERAND);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        FilterPrime();
        label_8:
        while (true) {
          jj_consume_token(AND);
          Filter();
          if (jj_2_14(2147483647)) {
            ;
          } else {
            break label_8;
          }
        }
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } else if (jj_2_17(2147483647)) {
    ASTFilterOr jjtn002 = new ASTFilterOr(JJTFILTEROR);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        FilterPrime();
        label_9:
        while (true) {
          jj_consume_token(OR);
          Filter();
          if (jj_2_15(2147483647)) {
            ;
          } else {
            break label_9;
          }
        }
      } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
    } else if (jj_2_18(2147483647)) {
      FilterPrime();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void FilterPrime() throws ParseException {
    if (jj_2_19(2147483647)) {
    ASTFilterEq jjtn001 = new ASTFilterEq(JJTFILTEREQ);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        RelPath();
        jj_consume_token(EQ);
        RelPath();
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } else if (jj_2_20(2147483647)) {
    ASTFilterIs jjtn002 = new ASTFilterIs(JJTFILTERIS);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        RelPath();
        jj_consume_token(IS);
        RelPath();
      } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
    } else if (jj_2_21(2147483647)) {
    ASTFilterRelPath jjtn003 = new ASTFilterRelPath(JJTFILTERRELPATH);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
      try {
        RelPath();
      } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte003;}
    }
    if (jjte003 instanceof ParseException) {
      {if (true) throw (ParseException)jjte003;}
    }
    {if (true) throw (Error)jjte003;}
      } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
    ASTFilterParen jjtn004 = new ASTFilterParen(JJTFILTERPAREN);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
        try {
          jj_consume_token(25);
          Filter();
          jj_consume_token(26);
        } catch (Throwable jjte004) {
    if (jjtc004) {
      jjtree.clearNodeScope(jjtn004);
      jjtc004 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte004 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte004;}
    }
    if (jjte004 instanceof ParseException) {
      {if (true) throw (ParseException)jjte004;}
    }
    {if (true) throw (Error)jjte004;}
        } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
        }
        break;
      case NOT:
    ASTFilterNot jjtn005 = new ASTFilterNot(JJTFILTERNOT);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
        try {
          jj_consume_token(NOT);
          Filter();
        } catch (Throwable jjte005) {
    if (jjtc005) {
      jjtree.clearNodeScope(jjtn005);
      jjtc005 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte005 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte005;}
    }
    if (jjte005 instanceof ParseException) {
      {if (true) throw (ParseException)jjte005;}
    }
    {if (true) throw (Error)jjte005;}
        } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
    }
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void ForClause() throws ParseException {
                               /*@bgen(jjtree) ForClause */
  ASTForClause jjtn000 = new ASTForClause(JJTFORCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      In();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        In();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void In() throws ParseException {
                 /*@bgen(jjtree) In */
  ASTIn jjtn000 = new ASTIn(JJTIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Var();
      jj_consume_token(IN);
      XQuery();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void LetClause() throws ParseException {
                               /*@bgen(jjtree) LetClause */
  ASTLetClause jjtn000 = new ASTLetClause(JJTLETCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LET);
      Assign();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_11;
        }
        jj_consume_token(COMMA);
        Assign();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Assign() throws ParseException {
                         /*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Var();
      jj_consume_token(ASSIGN);
      XQuery();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void WhereClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
    ASTWhereClause jjtn001 = new ASTWhereClause(JJTWHERECLAUSE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(WHERE);
        Cond();
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
    default:
      jj_la1[8] = jj_gen;

    }
  }

  static final public void ReturnClause() throws ParseException {
    ASTReturnClause jjtn001 = new ASTReturnClause(JJTRETURNCLAUSE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(RETURN);
      XQuery();
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  static final public void Cond() throws ParseException {
    if (jj_2_24(2147483647)) {
    ASTCondAnd jjtn001 = new ASTCondAnd(JJTCONDAND);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        CondPrime();
        label_12:
        while (true) {
          jj_consume_token(AND);
          Cond();
          if (jj_2_22(2147483647)) {
            ;
          } else {
            break label_12;
          }
        }
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } else if (jj_2_25(2147483647)) {
    ASTCondOr jjtn002 = new ASTCondOr(JJTCONDOR);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        CondPrime();
        label_13:
        while (true) {
          jj_consume_token(OR);
          Cond();
          if (jj_2_23(2147483647)) {
            ;
          } else {
            break label_13;
          }
        }
      } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
    } else if (jj_2_26(2147483647)) {
      CondPrime();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void CondPrime() throws ParseException {
    if (jj_2_28(2147483647)) {
    ASTCondEq jjtn001 = new ASTCondEq(JJTCONDEQ);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        XQuery();
        jj_consume_token(EQ);
        XQuery();
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } else if (jj_2_29(2147483647)) {
    ASTCondIs jjtn002 = new ASTCondIs(JJTCONDIS);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        XQuery();
        jj_consume_token(IS);
        XQuery();
      } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EMPTY:
    ASTCondEmpty jjtn003 = new ASTCondEmpty(JJTCONDEMPTY);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(EMPTY);
          jj_consume_token(25);
          XQuery();
          jj_consume_token(26);
        } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte003;}
    }
    if (jjte003 instanceof ParseException) {
      {if (true) throw (ParseException)jjte003;}
    }
    {if (true) throw (Error)jjte003;}
        } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        if (jj_2_30(2147483647)) {
    ASTCondSome jjtn004 = new ASTCondSome(JJTCONDSOME);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
          try {
            jj_consume_token(SOME);
            In();
            label_14:
            while (true) {
              if (jj_2_27(2147483647)) {
                ;
              } else {
                break label_14;
              }
              jj_consume_token(COMMA);
              In();
            }
            jj_consume_token(SATISFIES);
            Cond();
          } catch (Throwable jjte004) {
    if (jjtc004) {
      jjtree.clearNodeScope(jjtn004);
      jjtc004 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte004 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte004;}
    }
    if (jjte004 instanceof ParseException) {
      {if (true) throw (ParseException)jjte004;}
    }
    {if (true) throw (Error)jjte004;}
          } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 25:
    ASTParen jjtn005 = new ASTParen(JJTPAREN);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
            try {
              jj_consume_token(25);
              Cond();
              jj_consume_token(26);
            } catch (Throwable jjte005) {
    if (jjtc005) {
      jjtree.clearNodeScope(jjtn005);
      jjtc005 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte005 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte005;}
    }
    if (jjte005 instanceof ParseException) {
      {if (true) throw (ParseException)jjte005;}
    }
    {if (true) throw (Error)jjte005;}
            } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
    }
            }
            break;
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
  }

  static final public void Var() throws ParseException {
                   /*@bgen(jjtree) Var */
                    ASTVar jjtn000 = new ASTVar(JJTVAR);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(VAR);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.varName = t.image;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void XQuery() throws ParseException {
    if (jj_2_32(2147483647)) {
    ASTXQueryComma jjtn001 = new ASTXQueryComma(JJTXQUERYCOMMA);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        XQueryPrime();
        label_15:
        while (true) {
          Temp();
          if (jj_2_31(2147483647)) {
            ;
          } else {
            break label_15;
          }
        }
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } else if (jj_2_33(2147483647)) {
    ASTXQueryComma jjtn002 = new ASTXQueryComma(JJTXQUERYCOMMA);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        XQuerySlash();
        Temp();
      } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
    } else if (jj_2_34(2147483647)) {
      XQuerySlash();
    } else if (jj_2_35(2147483647)) {
      XQueryPrime();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void XQuerySlash() throws ParseException {
                                   /*@bgen(jjtree) XQuerySlash */
  ASTXQuerySlash jjtn000 = new ASTXQuerySlash(JJTXQUERYSLASH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      XQueryPrime();
      jj_consume_token(27);
      RelPath();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Temp() throws ParseException {
    if ((getToken(1).kind == COMMA && getToken(3).kind != IN && getToken(3).kind != ASSIGN )) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COMMA);
    XQuery();
  }

  static final public void XQueryPrime() throws ParseException {
                             Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      Var();
      break;
    case STRING:
      t = jj_consume_token(STRING);
                 ASTString jjtn001 = new ASTString(JJTSTRING);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
      try {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtc001 = false;
                 jjtn001.strName = t.image;
      } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
      }
      break;
    case DOC:
      AbsPath();
      break;
    case 25:
    ASTParen jjtn002 = new ASTParen(JJTPAREN);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(25);
        XQuery();
        jj_consume_token(26);
      } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
      break;
    case 34:
    ASTNewtag jjtn003 = new ASTNewtag(JJTNEWTAG);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(34);
        t = jj_consume_token(TAGNAME);
                       jjtn003.tagName = t.image;
        jj_consume_token(35);
        jj_consume_token(36);
        XQuery();
        jj_consume_token(37);
        jj_consume_token(34);
        jj_consume_token(27);
        jj_consume_token(TAGNAME);
        jj_consume_token(35);
      } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte003;}
    }
    if (jjte003 instanceof ParseException) {
      {if (true) throw (ParseException)jjte003;}
    }
    {if (true) throw (Error)jjte003;}
      } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      if (jj_2_36(2147483647)) {
    ASTFLWR jjtn004 = new ASTFLWR(JJTFLWR);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
        try {
          ForClause();
          LetClause();
          WhereClause();
          ReturnClause();
        } catch (Throwable jjte004) {
    if (jjtc004) {
      jjtree.clearNodeScope(jjtn004);
      jjtc004 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte004 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte004;}
    }
    if (jjte004 instanceof ParseException) {
      {if (true) throw (ParseException)jjte004;}
    }
    {if (true) throw (Error)jjte004;}
        } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
        }
      } else if (jj_2_37(2147483647)) {
    ASTFLWR jjtn005 = new ASTFLWR(JJTFLWR);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
        try {
          ForClause();
          WhereClause();
          ReturnClause();
        } catch (Throwable jjte005) {
    if (jjtc005) {
      jjtree.clearNodeScope(jjtn005);
      jjtc005 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte005 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte005;}
    }
    if (jjte005 instanceof ParseException) {
      {if (true) throw (ParseException)jjte005;}
    }
    {if (true) throw (Error)jjte005;}
        } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
    }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LET:
    ASTLX jjtn006 = new ASTLX(JJTLX);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
          try {
            LetClause();
            XQuery();
          } catch (Throwable jjte006) {
    if (jjtc006) {
      jjtree.clearNodeScope(jjtn006);
      jjtc006 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte006 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte006;}
    }
    if (jjte006 instanceof ParseException) {
      {if (true) throw (ParseException)jjte006;}
    }
    {if (true) throw (Error)jjte006;}
          } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
    }
          }
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_3R_59() {
    if (jj_3R_30()) return true;
    Token xsp;
    if (jj_3R_99()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_99()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(TAGNAME)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(25)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(26)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(TEXT)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(33)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(31)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(29)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(29)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(29)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_scan_token(29)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(29)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(28)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(28)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_scan_token(29)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(28)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(27)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_18()) return true;
    Token xsp;
    if (jj_3R_28()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_scan_token(29)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(27)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(27)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_18()) return true;
    Token xsp;
    if (jj_3R_27()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_scan_token(29)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_18()) return true;
    Token xsp;
    if (jj_3R_25()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_25()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_scan_token(28)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_18()) return true;
    Token xsp;
    if (jj_3R_23()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_23()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_scan_token(27)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_18()) return true;
    Token xsp;
    if (jj_3R_98()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_18()) return true;
    Token xsp;
    if (jj_3R_21()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_21()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_3R_18()) return true;
    Token xsp;
    if (jj_3R_97()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_97()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_18()) return true;
    Token xsp;
    if (jj_3R_20()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_18()) return true;
    Token xsp;
    if (jj_3R_96()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_3R_43()) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_18()) return true;
    Token xsp;
    if (jj_3R_19()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_18()) return true;
    Token xsp;
    if (jj_3R_95()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_95()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_3R_44()) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_18()) return true;
    Token xsp;
    if (jj_3R_94()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_94()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_3R_43()) return true;
    if (jj_3R_106()) return true;
    if (jj_3R_107()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_18()) return true;
    Token xsp;
    if (jj_3R_93()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_3R_43()) return true;
    if (jj_3R_44()) return true;
    if (jj_3R_106()) return true;
    if (jj_3R_107()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_18()) return true;
    Token xsp;
    if (jj_3R_92()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_92()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_scan_token(34)) return true;
    if (jj_scan_token(TAGNAME)) return true;
    if (jj_scan_token(35)) return true;
    if (jj_scan_token(36)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(37)) return true;
    if (jj_scan_token(34)) return true;
    if (jj_scan_token(27)) return true;
    if (jj_scan_token(TAGNAME)) return true;
    if (jj_scan_token(35)) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_scan_token(25)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(26)) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_3R_105()) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(28)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) return true;
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(27)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(DOC)) return true;
    if (jj_scan_token(25)) return true;
    if (jj_scan_token(STRING)) return true;
    if (jj_scan_token(26)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    jj_lookingAhead = true;
    jj_semLA = (getToken(1).kind == COMMA && getToken(3).kind != IN && getToken(3).kind != ASSIGN );
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_80()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_41()) return true;
    if (jj_scan_token(27)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_3R_42()) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_3R_41()) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_3R_42()) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_3R_41()) return true;
    Token xsp;
    if (jj_3R_104()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_104()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_scan_token(SOME)) return true;
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_39()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_3R_38()) return true;
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_scan_token(25)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(26)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_3R_38()) return true;
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_scan_token(SOME)) return true;
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_103()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SATISFIES)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_scan_token(EMPTY)) return true;
    if (jj_scan_token(25)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(26)) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_3R_38()) return true;
    if (jj_scan_token(IS)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_3R_34()) return true;
    Token xsp;
    if (jj_3R_36()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_38()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_34()) return true;
    Token xsp;
    if (jj_3R_35()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_3R_34()) return true;
    Token xsp;
    if (jj_3R_102()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_102()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_3R_34()) return true;
    Token xsp;
    if (jj_3R_101()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_101()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_107() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    return false;
  }

  static private boolean jj_3R_108() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_3R_75()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(LET)) return true;
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_91()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_75()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_89()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_3R_17()) return true;
    if (jj_scan_token(IS)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_17()) return true;
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(25)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(26)) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_17()) return true;
    if (jj_scan_token(IS)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_30()) return true;
    Token xsp;
    if (jj_3R_32()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_32()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_3R_17()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_30()) return true;
    Token xsp;
    if (jj_3R_31()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_3R_30()) return true;
    Token xsp;
    if (jj_3R_100()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_100()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public XQueryParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20000000,0x20000000,0x20000000,0x20000000,0x82800040,0x2000800,0x100000,0x100000,0x8000,0x20000,0x2000000,0x3400020,0x4000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[37];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public XQueryParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public XQueryParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new XQueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public XQueryParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new XQueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public XQueryParser(XQueryParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(XQueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[38];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 37; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
