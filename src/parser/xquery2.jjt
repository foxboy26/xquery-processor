options {
  MULTI = true;
  KEEP_LINE_COLUMN = false;
}

PARSER_BEGIN(XQueryParser)

/** An XQuery Grammar. */
public class XQueryParser {

  /** Main entry point. */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    XQueryParser t = new XQueryParser(System.in);
    try {
      ASTStart n = t.Start();
      n.dump(">");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(XQueryParser)


SKIP :
{
  " "
| 
  "\t"
| 
  "\n"
| 
  "\r"
}

TOKEN [IGNORE_CASE]:
{
  < DOC  : "doc" >
| 
  < TEXT : "text()" >
| 
  < EQ   : "=" | "eq" >
| 
  < IS   : "==" | "is" >
| 
  < AND  : "and" >
|   
  < OR   : "or" >
| 
  < NOT  : "not" >
}

TOKEN :
{
  < STRING  : "\"" (~["\""] | "\\\"")*  "\"" >
| 
  < TAGNAME : ( ["a"-"z","A"-"Z","_","-","0"-"9"] )+ >
}

/** Main production. */
ASTStart Start() : {}
{
  XPath()
  { return jjtThis; }
}

/** An Xpath. */
void XPath() #void : {}
{
  AbsPath()
}

/** An Absolute Path. */
void DocPath() #Doc : { Token t;}
{
  <DOC> "(" t = <STRING> { jjtThis.fileName = t.image; } ")"
}

void AbsPath() #void : {}
{
  LOOKAHEAD(5)
  (DocPath() "/" RelPath())  #AbsSlash
| 
  LOOKAHEAD(5)
  (DocPath() "//" RelPath()) #AbsDSlash
}

/** A Relative Path. */
void RelPath() #void : {}
{
  LOOKAHEAD(RelPathPrime() ("//" RelPath())+)
  (RelPathPrime() (LOOKAHEAD("//" RelPath())"//" RelPath())+)      #RelDSlash
| 
  LOOKAHEAD(RelPathPrime() ("/" RelPath())+)
  (RelPathPrime() (LOOKAHEAD("/" RelPath()) "/" RelPath())+)       #RelSlash
| 
  LOOKAHEAD(RelPathPrime() ("[" Filter() "]")+)
  (RelPathPrime() (LOOKAHEAD("[" Filter() "]") "[" Filter() "]")+) #RelFilter
| 
  LOOKAHEAD(RelPathPrime() ("," RelPath())+)
  (RelPathPrime() (LOOKAHEAD("," RelPath()) "," RelPath())+)       #Comma
| 
  LOOKAHEAD(RelPathPrime())
  RelPathPrime()                                                 //#Epsilon
}

void RelPathPrime() #void : { Token t; }
{
  "*"                                          #Star
| 
  "."                                          #Dot
| 
  ".."                                         #Ddot
| 
  <TEXT>                                       #Text
| 
  ("(" RelPath() ")")                          #Paren
| 
  t = <TAGNAME> { jjtThis.tagName = t.image; } #TagName
}

/** A Filter Path. */
void Filter() #void : {}
{
  LOOKAHEAD(FilterPrime() (<AND> Filter())+)
  (FilterPrime() (LOOKAHEAD(<AND> Filter()) <AND> Filter())+) #FilterAnd
| 
  LOOKAHEAD(FilterPrime() (<OR>  Filter())+)
  (FilterPrime() (LOOKAHEAD(<AND> Filter()) <OR>  Filter())+) #FilterOr 
| 
  LOOKAHEAD(FilterPrime())
  FilterPrime()                                             //#Epsilon
}

void FilterPrime() #void : {}
{
  LOOKAHEAD(RelPath())
  RelPath()                //#FilterRelPath 
| 
  LOOKAHEAD(RelPath() <EQ>)
  (RelPath() <EQ> RelPath()) #FilterEq
| 
  LOOKAHEAD(RelPath() <IS>)
  (RelPath() <IS> RelPath()) #FilterIs
| 
  ("(" Filter() ")")         #FilterParen
| 
  (<NOT> Filter())           #FilterNot
}

/** An XQuery. */
void XQuery() #void : {}
{
  
}
